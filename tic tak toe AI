def print_board(board):
    for row in board:
        print(' '.join(row))
    print()

def check_winner(board, player):
    win_states = [
        [board[0][0], board[0][1], board[0][2]],
        [board[1][0], board[1][1], board[1][2]],
        [board[2][0], board[2][1], board[2][2]],
        [board[0][0], board[1][0], board[2][0]],
        [board[0][1], board[1][1], board[2][1]],
        [board[0][2], board[1][2], board[2][2]],
        [board[0][0], board[1][1], board[2][2]],
        [board[2][0], board[1][1], board[0][2]]
    ]
    return [player, player, player] in win_states

def minimax(board, depth, is_maximizing, player, opponent):
    if check_winner(board, player):
        return 1
    elif check_winner(board, opponent):
        return -1
    elif not any(' ' in row for row in board):
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = player
                    score = minimax(board, depth + 1, False, player, opponent)
                    board[i][j] = ' '
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = opponent
                    score = minimax(board, depth + 1, True, player, opponent)
                    board[i][j] = ' '
                    best_score = min(score, best_score)
        return best_score

def best_move(board, player, opponent):
    move = None
    best_score = -float('inf')
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = player
                score = minimax(board, 0, False, player, opponent)
                board[i][j] = ' '
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

def main():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    player, opponent = 'X', 'O'
    turn = 'X'

    for _ in range(9):
        if turn == player:
            row, col = best_move(board, player, opponent)
        else:
            row, col = int(input("Enter row: ")), int(input("Enter col: "))
        
        if board[row][col] == ' ':
            board[row][col] = turn
            print_board(board)
            if check_winner(board, turn):
                print(f"{turn} wins!")
                return
            turn = opponent if turn == player else player
    print("It's a tie!")

if _name_ == "_main_":
    main()
